'use strict';

var get = require('lodash/get');
var got = require('got');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var get__default = /*#__PURE__*/_interopDefault(get);
var got__default = /*#__PURE__*/_interopDefault(got);

const DEFAULT_COMMIT_TYPES = ["üé®", "‚ö°Ô∏è", "üî•", "üêõ", "üöëÔ∏è", "‚ú®", "üìù", "üöÄ", "üíÑ", "üéâ", "‚úÖ", "üîíÔ∏è", "üîê", "üîñ", "üö®", "üöß", "üíö", "‚¨áÔ∏è", "‚¨ÜÔ∏è", "üìå", "üë∑", "üìà", "‚ôªÔ∏è", "‚ûï", "‚ûñ", "üîß", "üî®", "üåê", "‚úèÔ∏è", "üí©", "‚è™Ô∏è", "üîÄ", "üì¶Ô∏è", "üëΩÔ∏è", "üöö", "üìÑ", "üí•", "üç±", "‚ôøÔ∏è", "üí°", "üçª", "üí¨", "üóÉÔ∏è", "üîä", "üîá", "üë•", "üö∏", "üèóÔ∏è", "üì±", "ü§°", "ü•ö", "üôà", "üì∏", "‚öóÔ∏è", "üîçÔ∏è", "üè∑Ô∏è", "üå±", "üö©", "ü•Ö", "üí´", "üóëÔ∏è", "üõÇ", "ü©π", "üßê", "‚ö∞Ô∏è", "üß™", "üëî", "ü©∫", "üß±", "üßë‚Äçüíª", "üí∏", "üßµ", "ü¶∫", ":art:", ":zap:", ":fire:", ":bug:", ":ambulance:", ":parkles:", ":memo:", ":rocket:", ":lipstick:", ":tada:", ":hite_check_mark:", ":lock:", ":closed_lock_with_key:", ":bookmark:", ":rotating_light:", ":construction:", ":green_heart:", ":arrow_down:", ":arrow_up:", ":pushpin:", ":construction_worker:", ":chart_with_upwards_trend:", ":recycle:", ":eavy_plus_sign:", ":eavy_minus_sign:", ":wrench:", ":hammer:", ":globe_with_meridians:", ":pencil2:", ":poop:", ":rewind:", ":twisted_rightwards_arrows:", ":package:", ":alien:", ":truck:", ":page_facing_up:", ":boom:", ":bento:", ":wheelchair:", ":bulb:", ":beers:", ":speech_balloon:", ":card_file_box:", ":loud_sound:", ":mute:", ":busts_in_silhouette:", ":children_crossing:", ":building_construction:", ":iphone:", ":clown_face:", ":egg:", ":see_no_evil:", ":camera_flash:", ":alembic:", ":mag:", ":label:", ":seedling:", ":triangular_flag_on_post:", ":goal_net:", ":dizzy:", ":wastebasket:", ":passport_control:", ":adhesive_bandage:", ":monocle_face:", ":coffin:", ":test_tube:", ":necktie:", ":stethoscope:", ":bricks:", ":technologist:", ":money_with_wings:", ":thread:", ":safety_vest:"];
const isValidCommitMessage = (message, availableTypes = DEFAULT_COMMIT_TYPES) => {
  // Exceptions.
  // This is a message that's auto-generated by git. Can't do much about it unfortunately. Let's allow it.
  if (message.startsWith("Merge ") || message.startsWith("Revert ")) {
    return true;
  }
  console.log({
    message,
    messagezero: message[0]
  });
  return availableTypes.some(type => message.startsWith(type));
};

const extractCommits = async context => {
  // For "push" events, commits can be found in the "context.payload.commits".
  const pushCommits = Array.isArray(get__default["default"](context, "payload.commits"));
  if (pushCommits) {
    return context.payload.commits;
  }

  // For PRs, we need to get a list of commits via the GH API:
  const prCommitsUrl = get__default["default"](context, "payload.pull_request.commits_url");
  if (prCommitsUrl) {
    try {
      const {
        body
      } = await got__default["default"].get(prCommitsUrl, {
        responseType: "json"
      });
      if (Array.isArray(body)) {
        return body.map(item => item.commit);
      }
      return [];
    } catch {
      return [];
    }
  }
  return [];
};

const {
  context
} = require("@actions/github");
const core = require("@actions/core");
async function run() {
  core.info(`‚ÑπÔ∏è Checking if commit messages are following the Conventional Commits specification...`);
  const extractedCommits = await extractCommits(context);
  if (extractedCommits.length === 0) {
    core.info(`No commits to check, skipping...`);
    return;
  }
  let hasErrors;
  core.startGroup("Commit messages:");
  for (let i = 0; i < extractedCommits.length; i++) {
    let commit = extractedCommits[i];
    if (!commit) {
      continue;
    }
    if (isValidCommitMessage(commit.message)) {
      core.info(`‚úÖ ${commit.message}`);
    } else {
      core.info(`üö© ${commit.message}`);
      hasErrors = true;
    }
  }
  core.endGroup();
  if (hasErrors) {
    core.setFailed(`üö´ According to the conventional-commits specification, some of the commit messages are not valid.`);
  } else {
    core.info("üéâ All commit messages are following the Conventional Commits specification.");
  }
}
run();
